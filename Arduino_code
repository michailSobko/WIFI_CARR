#define REMOTEXY_MODE__ESP8266WIFI_LIB_POINT
#include <ESP8266WiFi.h>    //библиотека для работы wifi
#include <ArduinoOTA.h>     //библиотека для работы прошивки по воздуху
#include <Shift595.h>       //библиотека для работы сдвигового регистра
#include <RemoteXY.h>       //библиотека для работы в мобильном приложении

// настройки соединения
#define REMOTEXY_WIFI_SSID "WIFI_CAR"
#define REMOTEXY_WIFI_PASSWORD ""
#define REMOTEXY_SERVER_PORT 6377


// конфигурация интерфейса
#pragma pack(push, 1)
uint8_t RemoteXY_CONF[] =
{ 255, 11, 0, 1, 0, 48, 1, 10, 13, 4,
  1, 0, 17, 0, 12, 12, 1, 2, 31, 88,
  0, 2, 0, 29, 0, 22, 11, 1, 135, 26,
  31, 31, 76, 69, 68, 0, 79, 70, 70, 0,
  131, 1, 2, 2, 15, 6, 1, 2, 31, 77,
  97, 105, 110, 0, 131, 0, 2, 8, 15, 6,
  2, 2, 31, 76, 101, 100, 0, 5, 40, 28,
  14, 50, 50, 1, 2, 26, 31, 4, 32, 91,
  -1, 7, 61, 1, 2, 26, 2, 0, 17, 0,
  22, 9, 2, 16, 26, 24, 24, 79, 70, 70,
  0, 208, 148, 208, 189, 208, 181, 208, 178, 208,
  189, 208, 190, 208, 185, 0, 2, 0, 17, 9,
  22, 10, 2, 16, 26, 24, 24, 79, 70, 70,
  0, 208, 151, 208, 176, 208, 180, 208, 189, 208,
  184, 208, 185, 0, 2, 0, 17, 19, 22, 10,
  2, 1, 26, 31, 31, 79, 70, 70, 0, 208,
  161, 209, 130, 208, 190, 208, 191, 209, 139, 0,
  2, 0, 17, 29, 22, 11, 2, 2, 26, 31,
  31, 79, 70, 70, 0, 208, 159, 208, 190, 208,
  178, 45, 208, 189, 208, 184, 208, 186, 0, 2,
  0, 17, 40, 22, 11, 2, 2, 26, 31, 97,
  208, 144, 208, 178, 208, 176, 209, 128, 208, 184,
  209, 143, 0, 79, 70, 70, 0, 2, 0, 17,
  51, 22, 11, 2, 111, 26, 24, 32, 208, 148,
  208, 176, 208, 187, 209, 140, 208, 189, 208, 184,
  208, 185, 0, 79, 70, 70, 0, 66, 130, 0,
  20, 22, 17, 1, 2, 26, 129, 0, 1, 37,
  21, 2, 1, 136, 208, 151, 208, 176, 209, 128,
  209, 143, 208, 180, 32, 208, 176, 208, 186, 208,
  186, 209, 131, 208, 188, 209, 131, 208, 187, 209,
  143, 209, 130, 208, 190, 209, 128, 208, 176, 32,
  0
};

// структура определяет все переменные и события вашего интерфейса управления
struct {

  // input variables
  uint8_t button_1;     // Вкл Дальний свет
  uint8_t switch_1;     // Вкл/Выкл всех светодиодов
  int8_t  joystick_1_x; // Джойстик
  int8_t  joystick_1_y; // Джойстик
  int8_t  slider_1;     // Мощность двигателя
  uint8_t switch_2;     // Дневной свет
  uint8_t switch_3;     // Свет заднего хода
  uint8_t switch_4;     // Свет остановки
  uint8_t switch_5;     // Свет поворотников
  uint8_t switch_6;     // Авариийный свет
  uint8_t switch_7;     // Дальний свет
  int8_t level_1;       //уровень заряда батареи
  uint8_t connect_flag;

} RemoteXY;
//Пины для регистра
#define   dataPin        D4
#define   latchPin       D3
#define   clockPin       D2
//Пины подключения моторов
#define   UP_LEFT_0      D8//Левый мотор
#define   UP_LEFT_1      D7
#define   UP_RIGHT_0     D5//Правый мотор
#define   UP_RIGHT_1     D6
//Выходы регистра
#define   LED_TURN_L     1//1 
#define   LED_TURN_R     2//2 элемент
#define   LED_STOP       3//3 элемент
#define   LED_DHO        4//4 элемент
#define   LED_GROUND     5//5 элемент
#define   LED_D          6//6 элемент
#define   numOfRegisters 1//Кол-во регистров
#pragma pack(pop)

Shift595 Shifter(dataPin, latchPin, clockPin, numOfRegisters);    // Нужно для работы регистра

void setup()
{
  RemoteXY_Init ();
  ArduinoOTA.begin();
  pinMode (UP_RIGHT_1, OUTPUT);
  pinMode (UP_RIGHT_0, OUTPUT);
  pinMode (UP_LEFT_1, OUTPUT);
  pinMode (UP_LEFT_0, OUTPUT);
  pinMode(A0, INPUT);

}
long b = 0; //подсчета мс
int x, y;
void loop()
{
  ArduinoOTA.handle(); //для загрузки по wifi
  RemoteXY_Handler ();//для приложения RemoutXY
  Shifter.clearRegisters();//очищаем весь регитр
  //В х и у записываем положение джостика
  y = RemoteXY.joystick_1_y;  
  x = RemoteXY.joystick_1_x;
    int SPD = 10+RemoteXY.slider_1 / 30; //скорость двигателя
  TURN();     //управление светом поворотников
  LED();      //управление дневным и дальним светом ,светом заднего хода
  STOP();     //выкл моторов
  WARRING();  //управление аварийным светом
  charge();   //вывод заряда акумулятора
 //
 //управление моторами
int bb =0.5;
 if (y > 100) y = 100; if (y < -100) y = -100; if (x > 100) x = 100; if (x < -100) x = -100;
//
  if (y > 20 && x > -20 && x < 20) { //тупо прямо
    digitalWrite(UP_LEFT_0, 0);    analogWrite(UP_LEFT_1, y * SPD);
    digitalWrite(UP_RIGHT_0, 0);   analogWrite(UP_RIGHT_1, y * SPD);
  }

  else if (y < -20 && x > -20 && x < 20) { //тупо назад
    digitalWrite(UP_LEFT_1, 0);      analogWrite(UP_LEFT_0, (-y)*SPD);
    digitalWrite(UP_RIGHT_1, 0);     analogWrite(UP_RIGHT_0, (-y)*SPD);

  }
  else if (y > 20 && x > 20) { //вперед и вправо
    digitalWrite(UP_LEFT_0, 0);     analogWrite(UP_LEFT_1, y * SPD);
    digitalWrite(UP_RIGHT_0, 0);    analogWrite(UP_RIGHT_1, bb*y * SPD);

  }

  else if (y > 20 && x < -20) { //вперед и на лево

    digitalWrite(UP_LEFT_0, 0);     analogWrite(UP_LEFT_1, bb*y*SPD);
    digitalWrite(UP_RIGHT_0, 0);    analogWrite(UP_RIGHT_1, y * SPD);

  }

  else if (y < -20 && x > 20) { //назад вправо

    digitalWrite(UP_LEFT_0, 0);     analogWrite(UP_LEFT_1, bb*(-y)*SPD);
    digitalWrite(UP_RIGHT_0, 0);    analogWrite(UP_RIGHT_1, (-y)*SPD);

  }

  else if (y < -20 && x < -20) { //назад на лево

    digitalWrite(UP_LEFT_1, 0);    analogWrite(UP_LEFT_0, -y * SPD );
    digitalWrite (UP_RIGHT_0, 0);  analogWrite(UP_RIGHT_1, -y * SPD*bb);

  }

  else if (y < 20 && y > -20 && x < -20) { //Поворот влевую сторону

    digitalWrite(UP_LEFT_1, 0);    analogWrite(UP_LEFT_0, -x * SPD);
    digitalWrite(UP_RIGHT_0, 0);   analogWrite(UP_RIGHT_1, -x * SPD);
  }


  else if (y < 20 && y > -20 && x > 20) { //поворот в правую сторону

    digitalWrite(UP_LEFT_0, 0);    analogWrite(UP_LEFT_1, x * SPD);
    digitalWrite(UP_RIGHT_1, 0);   analogWrite(UP_RIGHT_0, x * SPD);
  }
 

}
//
//    Осуществляет остановку всех моторов и включение стоп сигнала
//  
void STOP()
{ if (x == 0 && y == 0) {
    digitalWrite(UP_LEFT_1, 0);
    digitalWrite(UP_LEFT_0, 0);
    digitalWrite(UP_RIGHT_1, 0);
    digitalWrite(UP_RIGHT_0, 0);
    if (RemoteXY.switch_4 == 0 && RemoteXY.switch_1 == 1)Shifter.setRegisterPin(LED_STOP, HIGH); else Shifter.setRegisterPin(LED_STOP, LOW);
  } else Shifter.setRegisterPin(LED_STOP, LOW);
}
//
//    Осуществляет вкл/выкл света заднего хода,дневного и дальнего света.
//
void LED()
{ if (y < -30 && RemoteXY.switch_1 == 1 && RemoteXY.switch_3 == 0) {
    Shifter.setRegisterPin(LED_GROUND, HIGH);
  } else Shifter.setRegisterPin (LED_GROUND, LOW); //задний ход лампаа
  if (RemoteXY.switch_1 == 1 && RemoteXY.switch_2 == 0)Shifter.setRegisterPin (LED_DHO, HIGH); else Shifter.setRegisterPin (LED_DHO, LOW); //включение/отключение Фар
  if (RemoteXY.button_1 == 1 || (RemoteXY.switch_1 == 1 && RemoteXY.switch_7 == 1))Shifter.setRegisterPin (LED_D, HIGH); else Shifter.setRegisterPin (LED_D, LOW); //вкл дальний
}
//
//    Осуществляет мигание двумя поворотниками
//
void WARRING()
{ if (RemoteXY.switch_6 == 1) {
    {
      long a = millis();
      if (a - b > 500)
      {
        Shifter.setRegisterPin(LED_TURN_R, HIGH);
        Shifter.setRegisterPin(LED_TURN_L, HIGH);
        if (a - b > 1000)
        {
          Shifter.setRegisterPin(LED_TURN_R, LOW);
          Shifter.setRegisterPin(LED_TURN_L, LOW) ;
          b = millis();
        }
      }
    }
  }
}

//
// Работа Поворотников
//
void TURN() { //поворот на право
  if (RemoteXY.switch_1 == 1 && RemoteXY.switch_5 == 0 && RemoteXY.switch_6 == 0) {
    if (x > 50) {
      {
        long a = millis();
        if (a - b > 500)
        {
          Shifter.setRegisterPin(LED_TURN_R, HIGH);
          if (a - b > 1000)
          {
            Shifter.setRegisterPin(LED_TURN_R, LOW) ;
            b = millis();
          }
        }
      }
    }
    if (x < -50) {
      {
        long a = millis();

        if (a - b > 500)
        {
          Shifter.setRegisterPin(LED_TURN_L, HIGH);
          if (a - b > 1000)
          {
            Shifter.setRegisterPin(LED_TURN_L, LOW) ;
            b = millis();
          }
        }
      }
    }
  }
}

//
//    Вывод на экран заряда аккумуляторов 
//

void charge()
  { long a = millis()         ;
  int chargeLevel_procents;
  float k = 3 * 1.12;
  if (a - b > 3000)

  {
    float voltage = k * 4.42f / 1024 * analogRead(A0);
    b = millis()         ;
    chargeLevel_procents = (voltage - 7.41) * 100;
    if (chargeLevel_procents < 0 || chargeLevel_procents > 100)
      RemoteXY.level_1 = 0;
    else
      RemoteXY.level_1 = chargeLevel_procents;
  }

}
